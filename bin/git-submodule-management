#!/usr/bin/env node
const process = require('process')
const { program } = require('commander')
const simpleGit = require('simple-git/promise');
const git = simpleGit()
const { version } = require('../package.json')

const submoduleCommands = [
  'submodule',
  'foreach',
  'git'
]

const getSubmoduleBranches = status => {
  const branchRegExp = /On branch ([^\r\n\t\f]+)/g
  const branches = []
  let match
  while (match = branchRegExp.exec(status)) {
    branches.push(match[1])
  }
  return branches
}

program
  .command('ac <message>')
  .action(async (message) => {
    try {
      try {
        await git.raw([
          ...submoduleCommands,
          'add',
          '-A'
        ])
      } catch (error) {
        console.log(error)
      }
      try {
        await git.raw([
          ...submoduleCommands,
          'commit',
          '-m',
          message
        ])
      } catch (error) {
        console.log('submodules working tree clean')
      }
      await git.raw([
        'add',
        '-A'
      ])
      await git.raw([
        'commit',
        '-m',
        message
      ])
      console.log('Add and commit successfully!')
    } catch (error) {
      console.error(error)
    }
  })

program
  .command('checkout [localBranch]')
  .option('-b, --branch <newBranch>', 'create and checkout a new branch')
  .action(async (localBranch, options) => {
    const { branch: newBranch } = options
    const status = await git.status()
    const { current: currentBranch } = status
    if (localBranch) {
      try {
        await git.checkout(localBranch)
        await git.raw([
          ...submoduleCommands,
          'checkout',
          localBranch
        ])
        console.log('Checkout successfully!')
      } catch (error) {
        console.error(error)
      }
    } else if (newBranch) {
      try {
        const subModuleStatus = await git.raw([
          ...submoduleCommands,
          'status'
        ])
        const subModuleBranches = getSubmoduleBranches(subModuleStatus)
        const { current: currentBranch } = await git.status()
        if (!subModuleBranches.every(item => item === currentBranch)) {
          console.error('Please make sure that repo branch equals subModuleBranches')
          return
        }
        await git.checkoutBranch(newBranch, currentBranch)
        await git.raw([
          ...submoduleCommands,
          'checkout',
          '-b',
          newBranch
        ])
      } catch (error) {
        console.error(error)
      }
    }
  })

program
  .command('pull')
  .action(async () => {
    try {
      const { current: currentBranch } = await git.status()
      await git.pull('origin', currentBranch)
      await git.raw([
        ...submoduleCommands,
        'pull',
        'origin',
        currentBranch
      ])
      console.log('Pull successfully!')
    } catch (error) {
      console.error(error)
    }
  })

program
  .command('push')
  .action(async () => {
    try {
      const subModuleStatus = await git.raw([
        ...submoduleCommands,
        'status'
      ])
      const subModuleBranches = getSubmoduleBranches(subModuleStatus)
      const { current: currentBranch } = await git.status()
      if (!subModuleBranches.every(item => item === currentBranch)) {
        console.error('Please make sure that repo branch equals subModuleBranches')
        return
      }

      await git.push('origin', currentBranch)
      await git.raw([
        ...submoduleCommands,
        'push',
        'origin',
        currentBranch
      ])
      console.log('Push successfully!')
    } catch (error) {
      console.error(error)
    }
  })

program
  .command('merge <localBranch>')
  .action(async (localBranch) => {
    const { current: currentBranch } = await git.status()
    await git.mergeFromTo(currentBranch, localBranch).catch(err => {
      console.error('Please fix conflicts and then commit the result.')
    })
    await git.raw([
      ...submoduleCommands,
      'merge',
      localBranch
    ]).catch(err => {
      console.error('Please fix submodules conflicts and then commit the result.')
    })
  })

program
  .command('clone <repo>')
  .action(async repo => {
    try {
      const result = await git.raw([
        'clone',
        '--recurse-submodules',
        repo,
      ])
      console.log(result)
    } catch (error) {
      console.error(error)
    }
  })

program.version(version)


program.parse(process.argv);
